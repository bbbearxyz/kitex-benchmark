// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: echo-yarpc.proto

package yarpc

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Request struct {
	Action  string `protobuf:"bytes,1,opt,name=Action,proto3" json:"Action,omitempty"`
	Field1  string `protobuf:"bytes,2,opt,name=field1,proto3" json:"field1,omitempty"`
	Field2  string `protobuf:"bytes,3,opt,name=field2,proto3" json:"field2,omitempty"`
	Field3  string `protobuf:"bytes,4,opt,name=field3,proto3" json:"field3,omitempty"`
	Field4  string `protobuf:"bytes,5,opt,name=field4,proto3" json:"field4,omitempty"`
	Field5  string `protobuf:"bytes,6,opt,name=field5,proto3" json:"field5,omitempty"`
	Field6  string `protobuf:"bytes,7,opt,name=field6,proto3" json:"field6,omitempty"`
	Field7  string `protobuf:"bytes,8,opt,name=field7,proto3" json:"field7,omitempty"`
	Field8  string `protobuf:"bytes,9,opt,name=field8,proto3" json:"field8,omitempty"`
	Field9  string `protobuf:"bytes,10,opt,name=field9,proto3" json:"field9,omitempty"`
	Field10 string `protobuf:"bytes,11,opt,name=field10,proto3" json:"field10,omitempty"`
	Time    int64  `protobuf:"varint,12,opt,name=time,proto3" json:"time,omitempty"`
	Length  int64  `protobuf:"varint,13,opt,name=length,proto3" json:"length,omitempty"`
}

func (m *Request) Reset()      { *m = Request{} }
func (*Request) ProtoMessage() {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_a13b478019c2a249, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Request) GetField1() string {
	if m != nil {
		return m.Field1
	}
	return ""
}

func (m *Request) GetField2() string {
	if m != nil {
		return m.Field2
	}
	return ""
}

func (m *Request) GetField3() string {
	if m != nil {
		return m.Field3
	}
	return ""
}

func (m *Request) GetField4() string {
	if m != nil {
		return m.Field4
	}
	return ""
}

func (m *Request) GetField5() string {
	if m != nil {
		return m.Field5
	}
	return ""
}

func (m *Request) GetField6() string {
	if m != nil {
		return m.Field6
	}
	return ""
}

func (m *Request) GetField7() string {
	if m != nil {
		return m.Field7
	}
	return ""
}

func (m *Request) GetField8() string {
	if m != nil {
		return m.Field8
	}
	return ""
}

func (m *Request) GetField9() string {
	if m != nil {
		return m.Field9
	}
	return ""
}

func (m *Request) GetField10() string {
	if m != nil {
		return m.Field10
	}
	return ""
}

func (m *Request) GetTime() int64 {
	if m != nil {
		return m.Time
	}
	return 0
}

func (m *Request) GetLength() int64 {
	if m != nil {
		return m.Length
	}
	return 0
}

type Response struct {
	Action string `protobuf:"bytes,1,opt,name=Action,proto3" json:"Action,omitempty"`
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	IsEnd  bool   `protobuf:"varint,3,opt,name=isEnd,proto3" json:"isEnd,omitempty"`
}

func (m *Response) Reset()      { *m = Response{} }
func (*Response) ProtoMessage() {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_a13b478019c2a249, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetAction() string {
	if m != nil {
		return m.Action
	}
	return ""
}

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

func (m *Response) GetIsEnd() bool {
	if m != nil {
		return m.IsEnd
	}
	return false
}

func init() {
	proto.RegisterType((*Request)(nil), "protobuf.Request")
	proto.RegisterType((*Response)(nil), "protobuf.Response")
}

func init() { proto.RegisterFile("echo-yarpc.proto", fileDescriptor_a13b478019c2a249) }

var fileDescriptor_a13b478019c2a249 = []byte{
	// 402 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd2, 0x3f, 0xef, 0xd2, 0x40,
	0x18, 0x07, 0xf0, 0xde, 0x8f, 0x02, 0xe5, 0xd0, 0x04, 0x2f, 0xc6, 0x5c, 0x1c, 0x2e, 0x84, 0x89,
	0x85, 0x16, 0xf9, 0x0f, 0x9b, 0x12, 0x16, 0x27, 0x53, 0x98, 0xdc, 0xda, 0x72, 0xd0, 0x06, 0xda,
	0xab, 0xed, 0x91, 0x80, 0x93, 0x2f, 0xc1, 0x97, 0xe1, 0xe4, 0x5b, 0x70, 0x75, 0x64, 0x64, 0x94,
	0xb2, 0x38, 0xf2, 0x12, 0x4c, 0xff, 0x70, 0xb9, 0xc5, 0x44, 0xa7, 0xde, 0xf7, 0xd3, 0x3c, 0x7d,
	0xd2, 0xe7, 0x39, 0xd8, 0xa0, 0x8e, 0xcb, 0x3a, 0x27, 0x2b, 0x0a, 0x1d, 0x3d, 0x8c, 0x18, 0x67,
	0x48, 0xcb, 0x1e, 0xf6, 0x61, 0xd3, 0xfa, 0xf1, 0x04, 0xab, 0x26, 0xfd, 0x74, 0xa0, 0x31, 0x47,
	0xaf, 0x60, 0xe5, 0xad, 0xc3, 0x3d, 0x16, 0x60, 0xd0, 0x04, 0xed, 0x9a, 0x59, 0xa4, 0xd4, 0x37,
	0x1e, 0xdd, 0xaf, 0xdf, 0xe0, 0xa7, 0xdc, 0xf3, 0x24, 0xbc, 0x87, 0x4b, 0x92, 0xf7, 0x84, 0xf7,
	0xb1, 0x2a, 0x79, 0x5f, 0xf8, 0x00, 0x97, 0x25, 0x1f, 0x08, 0x1f, 0xe2, 0x8a, 0xe4, 0x43, 0xe1,
	0x23, 0x5c, 0x95, 0x7c, 0x24, 0x7c, 0x8c, 0x35, 0xc9, 0xc7, 0xc2, 0x27, 0xb8, 0x26, 0xf9, 0x44,
	0xf8, 0x14, 0x43, 0xc9, 0xa7, 0x08, 0xc3, 0x6a, 0xfe, 0x27, 0x5d, 0x5c, 0xcf, 0x5e, 0x3c, 0x22,
	0x42, 0x50, 0xe5, 0x9e, 0x4f, 0xf1, 0xb3, 0x26, 0x68, 0x97, 0xcc, 0xec, 0x9c, 0x7e, 0x65, 0x4f,
	0x83, 0x2d, 0x77, 0xf1, 0xf3, 0x4c, 0x8b, 0xd4, 0x7a, 0x0f, 0x35, 0x93, 0xc6, 0x21, 0x0b, 0x62,
	0xfa, 0xd7, 0x09, 0x36, 0x60, 0xc9, 0x8f, 0xb7, 0xc5, 0xf8, 0xd2, 0x23, 0x7a, 0x09, 0xcb, 0x5e,
	0xbc, 0x08, 0xd6, 0xd9, 0xe8, 0x34, 0x33, 0x0f, 0xbd, 0xef, 0x00, 0xaa, 0x0b, 0xc7, 0x65, 0xc8,
	0x80, 0xea, 0x92, 0x06, 0x6b, 0xf4, 0x42, 0x7f, 0x6c, 0x4a, 0x2f, 0xb6, 0xf4, 0x1a, 0xc9, 0x94,
	0xf7, 0x6d, 0x29, 0x68, 0x0a, 0xe1, 0x92, 0x47, 0xd4, 0xf2, 0x57, 0xe9, 0x26, 0xff, 0xb5, 0xac,
	0x0d, 0xba, 0x00, 0xcd, 0x60, 0x7d, 0x35, 0xff, 0x30, 0x67, 0x31, 0xff, 0xef, 0xda, 0x77, 0xe1,
	0xf9, 0x4a, 0x94, 0xcb, 0x95, 0x28, 0xf7, 0x2b, 0x01, 0x5f, 0x12, 0x02, 0xbe, 0x25, 0x04, 0xfc,
	0x4c, 0x08, 0x38, 0x27, 0x04, 0xfc, 0x4a, 0x08, 0xf8, 0x9d, 0x10, 0xe5, 0x9e, 0x10, 0xf0, 0xf5,
	0x46, 0x94, 0xf3, 0x8d, 0x28, 0x97, 0x1b, 0x51, 0x3e, 0xce, 0xb6, 0x1e, 0x77, 0x0f, 0xb6, 0xee,
	0x30, 0xdf, 0xb0, 0x6d, 0x9b, 0x5a, 0xd1, 0xf1, 0xf4, 0xd9, 0xd8, 0x79, 0x9c, 0x1e, 0x3b, 0x36,
	0x0d, 0x1c, 0xd7, 0xb7, 0xa2, 0x9d, 0xe1, 0x30, 0xdf, 0x67, 0x81, 0xf1, 0x68, 0x6d, 0x64, 0x17,
	0xd8, 0xae, 0x64, 0xb9, 0xff, 0x27, 0x00, 0x00, 0xff, 0xff, 0xa9, 0xf5, 0x16, 0xbc, 0xd5, 0x02,
	0x00, 0x00,
}

func (this *Request) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Request)
	if !ok {
		that2, ok := that.(Request)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.Field1 != that1.Field1 {
		return false
	}
	if this.Field2 != that1.Field2 {
		return false
	}
	if this.Field3 != that1.Field3 {
		return false
	}
	if this.Field4 != that1.Field4 {
		return false
	}
	if this.Field5 != that1.Field5 {
		return false
	}
	if this.Field6 != that1.Field6 {
		return false
	}
	if this.Field7 != that1.Field7 {
		return false
	}
	if this.Field8 != that1.Field8 {
		return false
	}
	if this.Field9 != that1.Field9 {
		return false
	}
	if this.Field10 != that1.Field10 {
		return false
	}
	if this.Time != that1.Time {
		return false
	}
	if this.Length != that1.Length {
		return false
	}
	return true
}
func (this *Response) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Response)
	if !ok {
		that2, ok := that.(Response)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.Action != that1.Action {
		return false
	}
	if this.Msg != that1.Msg {
		return false
	}
	if this.IsEnd != that1.IsEnd {
		return false
	}
	return true
}
func (this *Request) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 17)
	s = append(s, "&yarpc.Request{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "Field1: "+fmt.Sprintf("%#v", this.Field1)+",\n")
	s = append(s, "Field2: "+fmt.Sprintf("%#v", this.Field2)+",\n")
	s = append(s, "Field3: "+fmt.Sprintf("%#v", this.Field3)+",\n")
	s = append(s, "Field4: "+fmt.Sprintf("%#v", this.Field4)+",\n")
	s = append(s, "Field5: "+fmt.Sprintf("%#v", this.Field5)+",\n")
	s = append(s, "Field6: "+fmt.Sprintf("%#v", this.Field6)+",\n")
	s = append(s, "Field7: "+fmt.Sprintf("%#v", this.Field7)+",\n")
	s = append(s, "Field8: "+fmt.Sprintf("%#v", this.Field8)+",\n")
	s = append(s, "Field9: "+fmt.Sprintf("%#v", this.Field9)+",\n")
	s = append(s, "Field10: "+fmt.Sprintf("%#v", this.Field10)+",\n")
	s = append(s, "Time: "+fmt.Sprintf("%#v", this.Time)+",\n")
	s = append(s, "Length: "+fmt.Sprintf("%#v", this.Length)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *Response) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&yarpc.Response{")
	s = append(s, "Action: "+fmt.Sprintf("%#v", this.Action)+",\n")
	s = append(s, "Msg: "+fmt.Sprintf("%#v", this.Msg)+",\n")
	s = append(s, "IsEnd: "+fmt.Sprintf("%#v", this.IsEnd)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringEchoYarpc(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Length != 0 {
		i = encodeVarintEchoYarpc(dAtA, i, uint64(m.Length))
		i--
		dAtA[i] = 0x68
	}
	if m.Time != 0 {
		i = encodeVarintEchoYarpc(dAtA, i, uint64(m.Time))
		i--
		dAtA[i] = 0x60
	}
	if len(m.Field10) > 0 {
		i -= len(m.Field10)
		copy(dAtA[i:], m.Field10)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Field10)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.Field9) > 0 {
		i -= len(m.Field9)
		copy(dAtA[i:], m.Field9)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Field9)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Field8) > 0 {
		i -= len(m.Field8)
		copy(dAtA[i:], m.Field8)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Field8)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.Field7) > 0 {
		i -= len(m.Field7)
		copy(dAtA[i:], m.Field7)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Field7)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Field6) > 0 {
		i -= len(m.Field6)
		copy(dAtA[i:], m.Field6)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Field6)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Field5) > 0 {
		i -= len(m.Field5)
		copy(dAtA[i:], m.Field5)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Field5)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Field4) > 0 {
		i -= len(m.Field4)
		copy(dAtA[i:], m.Field4)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Field4)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Field3) > 0 {
		i -= len(m.Field3)
		copy(dAtA[i:], m.Field3)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Field3)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Field2) > 0 {
		i -= len(m.Field2)
		copy(dAtA[i:], m.Field2)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Field2)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Field1) > 0 {
		i -= len(m.Field1)
		copy(dAtA[i:], m.Field1)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Field1)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.IsEnd {
		i--
		if m.IsEnd {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Msg) > 0 {
		i -= len(m.Msg)
		copy(dAtA[i:], m.Msg)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Msg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Action) > 0 {
		i -= len(m.Action)
		copy(dAtA[i:], m.Action)
		i = encodeVarintEchoYarpc(dAtA, i, uint64(len(m.Action)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintEchoYarpc(dAtA []byte, offset int, v uint64) int {
	offset -= sovEchoYarpc(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	l = len(m.Field1)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	l = len(m.Field2)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	l = len(m.Field3)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	l = len(m.Field4)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	l = len(m.Field5)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	l = len(m.Field6)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	l = len(m.Field7)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	l = len(m.Field8)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	l = len(m.Field9)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	l = len(m.Field10)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	if m.Time != 0 {
		n += 1 + sovEchoYarpc(uint64(m.Time))
	}
	if m.Length != 0 {
		n += 1 + sovEchoYarpc(uint64(m.Length))
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Action)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	l = len(m.Msg)
	if l > 0 {
		n += 1 + l + sovEchoYarpc(uint64(l))
	}
	if m.IsEnd {
		n += 2
	}
	return n
}

func sovEchoYarpc(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozEchoYarpc(x uint64) (n int) {
	return sovEchoYarpc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Request) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Request{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Field1:` + fmt.Sprintf("%v", this.Field1) + `,`,
		`Field2:` + fmt.Sprintf("%v", this.Field2) + `,`,
		`Field3:` + fmt.Sprintf("%v", this.Field3) + `,`,
		`Field4:` + fmt.Sprintf("%v", this.Field4) + `,`,
		`Field5:` + fmt.Sprintf("%v", this.Field5) + `,`,
		`Field6:` + fmt.Sprintf("%v", this.Field6) + `,`,
		`Field7:` + fmt.Sprintf("%v", this.Field7) + `,`,
		`Field8:` + fmt.Sprintf("%v", this.Field8) + `,`,
		`Field9:` + fmt.Sprintf("%v", this.Field9) + `,`,
		`Field10:` + fmt.Sprintf("%v", this.Field10) + `,`,
		`Time:` + fmt.Sprintf("%v", this.Time) + `,`,
		`Length:` + fmt.Sprintf("%v", this.Length) + `,`,
		`}`,
	}, "")
	return s
}
func (this *Response) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Response{`,
		`Action:` + fmt.Sprintf("%v", this.Action) + `,`,
		`Msg:` + fmt.Sprintf("%v", this.Msg) + `,`,
		`IsEnd:` + fmt.Sprintf("%v", this.IsEnd) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringEchoYarpc(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEchoYarpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field1", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field1 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field2", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field2 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field3", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field3 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field4", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field4 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field5", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field5 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field6", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field6 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field7", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field7 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field8", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field8 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field9", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field9 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Field10", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Field10 = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Time", wireType)
			}
			m.Time = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Time |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Length", wireType)
			}
			m.Length = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Length |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipEchoYarpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowEchoYarpc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Action", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Action = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Msg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Msg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsEnd", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsEnd = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipEchoYarpc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthEchoYarpc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipEchoYarpc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowEchoYarpc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowEchoYarpc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthEchoYarpc
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupEchoYarpc
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthEchoYarpc
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthEchoYarpc        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowEchoYarpc          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupEchoYarpc = fmt.Errorf("proto: unexpected end of group")
)
