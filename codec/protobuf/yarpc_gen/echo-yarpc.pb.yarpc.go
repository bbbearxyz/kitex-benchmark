// Code generated by protoc-gen-yarpc-go. DO NOT EDIT.
// source: echo-yarpc.proto

package yarpc

import (
	"context"
	"io/ioutil"
	"reflect"

	"github.com/gogo/protobuf/jsonpb"
	"github.com/gogo/protobuf/proto"
	"go.uber.org/fx"
	"go.uber.org/yarpc"
	"go.uber.org/yarpc/api/transport"
	"go.uber.org/yarpc/api/x/restriction"
	"go.uber.org/yarpc/encoding/protobuf"
	"go.uber.org/yarpc/encoding/protobuf/reflection"
)

var _ = ioutil.NopCloser

// EchoYARPCClient is the YARPC client-side interface for the Echo service.
type EchoYARPCClient interface {
	Send(context.Context, *Request, ...yarpc.CallOption) (*Response, error)
	StreamTest(context.Context, ...yarpc.CallOption) (EchoServiceStreamTestYARPCClient, error)
	TCPCostTest(context.Context, ...yarpc.CallOption) (EchoServiceTCPCostTestYARPCClient, error)
}

// EchoServiceStreamTestYARPCClient sends Requests and receives Responses, returning io.EOF when the stream is complete.
type EchoServiceStreamTestYARPCClient interface {
	Context() context.Context
	Send(*Request, ...yarpc.StreamOption) error
	Recv(...yarpc.StreamOption) (*Response, error)
	CloseSend(...yarpc.StreamOption) error
}

// EchoServiceTCPCostTestYARPCClient sends Requests and receives Responses, returning io.EOF when the stream is complete.
type EchoServiceTCPCostTestYARPCClient interface {
	Context() context.Context
	Send(*Request, ...yarpc.StreamOption) error
	Recv(...yarpc.StreamOption) (*Response, error)
	CloseSend(...yarpc.StreamOption) error
}

func newEchoYARPCClient(clientConfig transport.ClientConfig, anyResolver jsonpb.AnyResolver, options ...protobuf.ClientOption) EchoYARPCClient {
	return &_EchoYARPCCaller{protobuf.NewStreamClient(
		protobuf.ClientParams{
			ServiceName:  "protobuf.Echo",
			ClientConfig: clientConfig,
			AnyResolver:  anyResolver,
			Options:      options,
		},
	)}
}

// NewEchoYARPCClient builds a new YARPC client for the Echo service.
func NewEchoYARPCClient(clientConfig transport.ClientConfig, options ...protobuf.ClientOption) EchoYARPCClient {
	return newEchoYARPCClient(clientConfig, nil, options...)
}

// EchoYARPCServer is the YARPC server-side interface for the Echo service.
type EchoYARPCServer interface {
	Send(context.Context, *Request) (*Response, error)
	StreamTest(EchoServiceStreamTestYARPCServer) error
	TCPCostTest(EchoServiceTCPCostTestYARPCServer) error
}

// EchoServiceStreamTestYARPCServer receives Requests and sends Response.
type EchoServiceStreamTestYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*Request, error)
	Send(*Response, ...yarpc.StreamOption) error
}

// EchoServiceTCPCostTestYARPCServer receives Requests and sends Response.
type EchoServiceTCPCostTestYARPCServer interface {
	Context() context.Context
	Recv(...yarpc.StreamOption) (*Request, error)
	Send(*Response, ...yarpc.StreamOption) error
}

type buildEchoYARPCProceduresParams struct {
	Server      EchoYARPCServer
	AnyResolver jsonpb.AnyResolver
}

func buildEchoYARPCProcedures(params buildEchoYARPCProceduresParams) []transport.Procedure {
	handler := &_EchoYARPCHandler{params.Server}
	return protobuf.BuildProcedures(
		protobuf.BuildProceduresParams{
			ServiceName: "protobuf.Echo",
			UnaryHandlerParams: []protobuf.BuildProceduresUnaryHandlerParams{
				{
					MethodName: "Send",
					Handler: protobuf.NewUnaryHandler(
						protobuf.UnaryHandlerParams{
							Handle:      handler.Send,
							NewRequest:  newEchoServiceSendYARPCRequest,
							AnyResolver: params.AnyResolver,
						},
					),
				},
			},
			OnewayHandlerParams: []protobuf.BuildProceduresOnewayHandlerParams{},
			StreamHandlerParams: []protobuf.BuildProceduresStreamHandlerParams{
				{
					MethodName: "StreamTest",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.StreamTest,
						},
					),
				},
				{
					MethodName: "TCPCostTest",
					Handler: protobuf.NewStreamHandler(
						protobuf.StreamHandlerParams{
							Handle: handler.TCPCostTest,
						},
					),
				},
			},
		},
	)
}

// BuildEchoYARPCProcedures prepares an implementation of the Echo service for YARPC registration.
func BuildEchoYARPCProcedures(server EchoYARPCServer) []transport.Procedure {
	return buildEchoYARPCProcedures(buildEchoYARPCProceduresParams{Server: server})
}

// FxEchoYARPCClientParams defines the input
// for NewFxEchoYARPCClient. It provides the
// paramaters to get a EchoYARPCClient in an
// Fx application.
type FxEchoYARPCClientParams struct {
	fx.In

	Provider    yarpc.ClientConfig
	AnyResolver jsonpb.AnyResolver  `name:"yarpcfx" optional:"true"`
	Restriction restriction.Checker `optional:"true"`
}

// FxEchoYARPCClientResult defines the output
// of NewFxEchoYARPCClient. It provides a
// EchoYARPCClient to an Fx application.
type FxEchoYARPCClientResult struct {
	fx.Out

	Client EchoYARPCClient

	// We are using an fx.Out struct here instead of just returning a client
	// so that we can add more values or add named versions of the client in
	// the future without breaking any existing code.
}

// NewFxEchoYARPCClient provides a EchoYARPCClient
// to an Fx application using the given name for routing.
//
//  fx.Provide(
//    yarpc.NewFxEchoYARPCClient("service-name"),
//    ...
//  )
func NewFxEchoYARPCClient(name string, options ...protobuf.ClientOption) interface{} {
	return func(params FxEchoYARPCClientParams) FxEchoYARPCClientResult {
		cc := params.Provider.ClientConfig(name)

		if params.Restriction != nil {
			if namer, ok := cc.GetUnaryOutbound().(transport.Namer); ok {
				if err := params.Restriction.Check(protobuf.Encoding, namer.TransportName()); err != nil {
					panic(err.Error())
				}
			}
		}

		return FxEchoYARPCClientResult{
			Client: newEchoYARPCClient(cc, params.AnyResolver, options...),
		}
	}
}

// FxEchoYARPCProceduresParams defines the input
// for NewFxEchoYARPCProcedures. It provides the
// paramaters to get EchoYARPCServer procedures in an
// Fx application.
type FxEchoYARPCProceduresParams struct {
	fx.In

	Server      EchoYARPCServer
	AnyResolver jsonpb.AnyResolver `name:"yarpcfx" optional:"true"`
}

// FxEchoYARPCProceduresResult defines the output
// of NewFxEchoYARPCProcedures. It provides
// EchoYARPCServer procedures to an Fx application.
//
// The procedures are provided to the "yarpcfx" value group.
// Dig 1.2 or newer must be used for this feature to work.
type FxEchoYARPCProceduresResult struct {
	fx.Out

	Procedures     []transport.Procedure `group:"yarpcfx"`
	ReflectionMeta reflection.ServerMeta `group:"yarpcfx"`
}

// NewFxEchoYARPCProcedures provides EchoYARPCServer procedures to an Fx application.
// It expects a EchoYARPCServer to be present in the container.
//
//  fx.Provide(
//    yarpc.NewFxEchoYARPCProcedures(),
//    ...
//  )
func NewFxEchoYARPCProcedures() interface{} {
	return func(params FxEchoYARPCProceduresParams) FxEchoYARPCProceduresResult {
		return FxEchoYARPCProceduresResult{
			Procedures: buildEchoYARPCProcedures(buildEchoYARPCProceduresParams{
				Server:      params.Server,
				AnyResolver: params.AnyResolver,
			}),
			ReflectionMeta: reflection.ServerMeta{
				ServiceName:     "protobuf.Echo",
				FileDescriptors: yarpcFileDescriptorClosurea13b478019c2a249,
			},
		}
	}
}

type _EchoYARPCCaller struct {
	streamClient protobuf.StreamClient
}

func (c *_EchoYARPCCaller) Send(ctx context.Context, request *Request, options ...yarpc.CallOption) (*Response, error) {
	responseMessage, err := c.streamClient.Call(ctx, "Send", request, newEchoServiceSendYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*Response)
	if !ok {
		return nil, protobuf.CastError(emptyEchoServiceSendYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_EchoYARPCCaller) StreamTest(ctx context.Context, options ...yarpc.CallOption) (EchoServiceStreamTestYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "StreamTest", options...)
	if err != nil {
		return nil, err
	}
	return &_EchoServiceStreamTestYARPCClient{stream: stream}, nil
}

func (c *_EchoYARPCCaller) TCPCostTest(ctx context.Context, options ...yarpc.CallOption) (EchoServiceTCPCostTestYARPCClient, error) {
	stream, err := c.streamClient.CallStream(ctx, "TCPCostTest", options...)
	if err != nil {
		return nil, err
	}
	return &_EchoServiceTCPCostTestYARPCClient{stream: stream}, nil
}

type _EchoYARPCHandler struct {
	server EchoYARPCServer
}

func (h *_EchoYARPCHandler) Send(ctx context.Context, requestMessage proto.Message) (proto.Message, error) {
	var request *Request
	var ok bool
	if requestMessage != nil {
		request, ok = requestMessage.(*Request)
		if !ok {
			return nil, protobuf.CastError(emptyEchoServiceSendYARPCRequest, requestMessage)
		}
	}
	response, err := h.server.Send(ctx, request)
	if response == nil {
		return nil, err
	}
	return response, err
}

func (h *_EchoYARPCHandler) StreamTest(serverStream *protobuf.ServerStream) error {
	return h.server.StreamTest(&_EchoServiceStreamTestYARPCServer{serverStream: serverStream})
}

func (h *_EchoYARPCHandler) TCPCostTest(serverStream *protobuf.ServerStream) error {
	return h.server.TCPCostTest(&_EchoServiceTCPCostTestYARPCServer{serverStream: serverStream})
}

type _EchoServiceStreamTestYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_EchoServiceStreamTestYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_EchoServiceStreamTestYARPCClient) Send(request *Request, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_EchoServiceStreamTestYARPCClient) Recv(options ...yarpc.StreamOption) (*Response, error) {
	responseMessage, err := c.stream.Receive(newEchoServiceStreamTestYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*Response)
	if !ok {
		return nil, protobuf.CastError(emptyEchoServiceStreamTestYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_EchoServiceStreamTestYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _EchoServiceTCPCostTestYARPCClient struct {
	stream *protobuf.ClientStream
}

func (c *_EchoServiceTCPCostTestYARPCClient) Context() context.Context {
	return c.stream.Context()
}

func (c *_EchoServiceTCPCostTestYARPCClient) Send(request *Request, options ...yarpc.StreamOption) error {
	return c.stream.Send(request, options...)
}

func (c *_EchoServiceTCPCostTestYARPCClient) Recv(options ...yarpc.StreamOption) (*Response, error) {
	responseMessage, err := c.stream.Receive(newEchoServiceTCPCostTestYARPCResponse, options...)
	if responseMessage == nil {
		return nil, err
	}
	response, ok := responseMessage.(*Response)
	if !ok {
		return nil, protobuf.CastError(emptyEchoServiceTCPCostTestYARPCResponse, responseMessage)
	}
	return response, err
}

func (c *_EchoServiceTCPCostTestYARPCClient) CloseSend(options ...yarpc.StreamOption) error {
	return c.stream.Close(options...)
}

type _EchoServiceStreamTestYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_EchoServiceStreamTestYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_EchoServiceStreamTestYARPCServer) Recv(options ...yarpc.StreamOption) (*Request, error) {
	requestMessage, err := s.serverStream.Receive(newEchoServiceStreamTestYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*Request)
	if !ok {
		return nil, protobuf.CastError(emptyEchoServiceStreamTestYARPCRequest, requestMessage)
	}
	return request, err
}

func (s *_EchoServiceStreamTestYARPCServer) Send(response *Response, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

type _EchoServiceTCPCostTestYARPCServer struct {
	serverStream *protobuf.ServerStream
}

func (s *_EchoServiceTCPCostTestYARPCServer) Context() context.Context {
	return s.serverStream.Context()
}

func (s *_EchoServiceTCPCostTestYARPCServer) Recv(options ...yarpc.StreamOption) (*Request, error) {
	requestMessage, err := s.serverStream.Receive(newEchoServiceTCPCostTestYARPCRequest, options...)
	if requestMessage == nil {
		return nil, err
	}
	request, ok := requestMessage.(*Request)
	if !ok {
		return nil, protobuf.CastError(emptyEchoServiceTCPCostTestYARPCRequest, requestMessage)
	}
	return request, err
}

func (s *_EchoServiceTCPCostTestYARPCServer) Send(response *Response, options ...yarpc.StreamOption) error {
	return s.serverStream.Send(response, options...)
}

func newEchoServiceSendYARPCRequest() proto.Message {
	return &Request{}
}

func newEchoServiceSendYARPCResponse() proto.Message {
	return &Response{}
}

func newEchoServiceStreamTestYARPCRequest() proto.Message {
	return &Request{}
}

func newEchoServiceStreamTestYARPCResponse() proto.Message {
	return &Response{}
}

func newEchoServiceTCPCostTestYARPCRequest() proto.Message {
	return &Request{}
}

func newEchoServiceTCPCostTestYARPCResponse() proto.Message {
	return &Response{}
}

var (
	emptyEchoServiceSendYARPCRequest         = &Request{}
	emptyEchoServiceSendYARPCResponse        = &Response{}
	emptyEchoServiceStreamTestYARPCRequest   = &Request{}
	emptyEchoServiceStreamTestYARPCResponse  = &Response{}
	emptyEchoServiceTCPCostTestYARPCRequest  = &Request{}
	emptyEchoServiceTCPCostTestYARPCResponse = &Response{}
)

var yarpcFileDescriptorClosurea13b478019c2a249 = [][]byte{
	// echo-yarpc.proto
	[]byte{
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0xd2, 0xcd, 0x6e, 0xaa, 0x40,
		0x14, 0x07, 0xf0, 0x8b, 0xa2, 0xe2, 0xf1, 0xde, 0xc4, 0x3b, 0x69, 0x9a, 0x93, 0xae, 0x8c, 0x2b,
		0x37, 0x82, 0xf5, 0x5b, 0xd3, 0x4d, 0x6b, 0xdc, 0x74, 0xd5, 0xa0, 0xab, 0xee, 0x00, 0x47, 0x21,
		0xca, 0x8c, 0x85, 0x31, 0xd1, 0x3e, 0x54, 0x5f, 0xa1, 0xaf, 0xd6, 0x30, 0xe0, 0x64, 0x36, 0x4d,
		0xda, 0x15, 0xf3, 0xff, 0x91, 0x73, 0x08, 0xe7, 0x0c, 0x34, 0x69, 0x10, 0xf2, 0xee, 0xc5, 0x4b,
		0x8e, 0x81, 0x7d, 0x4c, 0xb8, 0xe0, 0xc4, 0x92, 0x0f, 0xff, 0xb4, 0x6d, 0x7f, 0x96, 0xa0, 0xe6,
		0xd2, 0xb7, 0x13, 0x4d, 0x05, 0xb9, 0x85, 0xea, 0x63, 0x20, 0x22, 0xce, 0xd0, 0x68, 0x19, 0x9d,
		0xba, 0x5b, 0xa4, 0xcc, 0xb7, 0x11, 0x3d, 0x6c, 0xee, 0xb1, 0x94, 0x7b, 0x9e, 0x94, 0xf7, 0xb1,
		0xac, 0x79, 0x5f, 0xf9, 0x00, 0x4d, 0xcd, 0x07, 0xca, 0x87, 0x58, 0xd1, 0x7c, 0xa8, 0x7c, 0x84,
		0x55, 0xcd, 0x47, 0xca, 0xc7, 0x58, 0xd3, 0x7c, 0xac, 0x7c, 0x82, 0x96, 0xe6, 0x13, 0xe5, 0x53,
		0xac, 0x6b, 0x3e, 0x55, 0x3e, 0x43, 0xd0, 0x7c, 0x46, 0x10, 0x6a, 0xf9, 0x9f, 0xf4, 0xb0, 0x21,
		0x5f, 0x5c, 0x23, 0x21, 0x60, 0x8a, 0x28, 0xa6, 0xf8, 0xb7, 0x65, 0x74, 0xca, 0xae, 0x3c, 0x67,
		0x5d, 0x0e, 0x94, 0xed, 0x44, 0x88, 0xff, 0xa4, 0x16, 0xa9, 0xfd, 0x0c, 0x96, 0x4b, 0xd3, 0x23,
		0x67, 0x29, 0xfd, 0x76, 0x82, 0x4d, 0x28, 0xc7, 0xe9, 0xae, 0x18, 0x5f, 0x76, 0x24, 0x37, 0x50,
		0x89, 0xd2, 0x25, 0xdb, 0xc8, 0xd1, 0x59, 0x6e, 0x1e, 0xfa, 0x1f, 0x06, 0x98, 0xcb, 0x20, 0xe4,
		0xc4, 0x01, 0x73, 0x45, 0xd9, 0x86, 0xfc, 0xb7, 0xaf, 0x9b, 0xb2, 0x8b, 0x2d, 0xdd, 0x11, 0x9d,
		0xf2, 0xef, 0xb6, 0xff, 0x90, 0x19, 0xc0, 0x4a, 0x24, 0xd4, 0x8b, 0xd7, 0xd9, 0x26, 0x7f, 0x5a,
		0xd6, 0x31, 0x7a, 0x06, 0x99, 0x43, 0x63, 0xbd, 0x78, 0x59, 0xf0, 0x54, 0xfc, 0xba, 0xf6, 0xe9,
		0xe1, 0x75, 0xbe, 0x8b, 0x44, 0x78, 0xf2, 0xed, 0x80, 0xc7, 0x8e, 0xef, 0xfb, 0xd4, 0x4b, 0xce,
		0x97, 0x77, 0x67, 0x1f, 0x09, 0x7a, 0xee, 0xfa, 0x94, 0x05, 0x61, 0xec, 0x25, 0x7b, 0x27, 0xe0,
		0x71, 0xcc, 0x99, 0x73, 0x6d, 0xe3, 0xc8, 0xcb, 0xe8, 0x57, 0x65, 0x1e, 0x7c, 0x05, 0x00, 0x00,
		0xff, 0xff, 0xe1, 0x08, 0x5c, 0xee, 0xa1, 0x02, 0x00, 0x00,
	},
}

func init() {
	yarpc.RegisterClientBuilder(
		func(clientConfig transport.ClientConfig, structField reflect.StructField) EchoYARPCClient {
			return NewEchoYARPCClient(clientConfig, protobuf.ClientBuilderOptions(clientConfig, structField)...)
		},
	)
}
